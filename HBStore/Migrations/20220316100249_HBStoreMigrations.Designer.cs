// <auto-generated />
using System;
using HBStore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HBStore.Migrations
{
    [DbContext(typeof(HBStoreDbContext))]
    [Migration("20220316100249_HBStoreMigrations")]
    partial class HBStoreMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account_Role", (string)null);
                });

            modelBuilder.Entity("BrandSupplier", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.HasKey("BrandId", "SuppliersId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("BrandSupplier");
                });

            modelBuilder.Entity("HBStore.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "hilal@gmail.com",
                            IsBlocked = true,
                            Password = "123456",
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "bayrak@gmail.com",
                            IsBlocked = true,
                            Password = "654321",
                            Visibility = true
                        });
                });

            modelBuilder.Entity("HBStore.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DistrictId = 1,
                            Name = "Ev",
                            OpenAddress1 = "Gülsuyu Mahallesi, 134. Sokak, No:4, Kat:3",
                            OpenAddress2 = "Caminin arkası"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            DistrictId = 2,
                            Name = "İş",
                            OpenAddress1 = "Soğanlık Yeni Mahallesi, Pamukkale Sokak, No:11",
                            OpenAddress2 = "Marketin yanı"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Name = "LC Waikiki"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electronic"
                        });
                });

            modelBuilder.Entity("HBStore.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sakarya"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Istanbul"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HBStore.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Name = "LC Waikiki Şirketi"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Name = "Apple Şirketi"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Complaints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 0,
                            Detail = "blablablablabla",
                            Name = "X ürünü ile ilgili"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 0,
                            Detail = "asdadfsgfgdfdzr",
                            Name = "Y ürünü ile ilgili"
                        });
                });

            modelBuilder.Entity("HBStore.Model.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExpireMonth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExpireYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVV = 123,
                            CardNumber = "111111111111111111111111111",
                            ExpireMonth = "11",
                            ExpireYear = "27",
                            HolderName = "Hilal BAYRAK"
                        },
                        new
                        {
                            Id = 2,
                            CVV = 456,
                            CardNumber = "2222222222222222222222222222",
                            ExpireMonth = "10",
                            ExpireYear = "27",
                            HolderName = "Koray BAYRAK"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hilal",
                            OrderId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Koray",
                            OrderId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HBStore.Model.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Karasu"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Kartal"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kız",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Erkek",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HBStore.Model.Incidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("UserId");

                    b.ToTable("Incidences");
                });

            modelBuilder.Entity("HBStore.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Name = "Kıyafet Siparişi",
                            PaymentId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Name = "Elektronik Alet Siparişi",
                            PaymentId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("HBStore.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            Type = "Havale"
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2,
                            Type = "Kredi Kartı"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuantityPerUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CompanyId = 1,
                            Name = "Jean",
                            QuantityPerUnit = 0,
                            UnitPrice = 15m,
                            UnitsInStock = 10
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            CompanyId = 2,
                            Name = "Mobil Phone",
                            QuantityPerUnit = 0,
                            UnitPrice = 10m,
                            UnitsInStock = 15
                        });
                });

            modelBuilder.Entity("HBStore.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("HBStore.Model.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsVisibility = false,
                            Name = "SkyFly Group",
                            ProductId = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 2,
                            IsVisibility = false,
                            Name = "White Group",
                            ProductId = 0,
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("HBStore.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("GsmNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GenderId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hilal@gmailcom",
                            FirstName = "Hilal",
                            GsmNumber = "05395679685",
                            LastName = "BAYRAK",
                            Password = "12345",
                            UserName = "hilalbayrak"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "koray@gmailcom",
                            FirstName = "Koray",
                            GsmNumber = "05349435678",
                            LastName = "BAYRAK",
                            Password = "54321",
                            UserName = "koraybayrak"
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.HasOne("HBStore.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandSupplier", b =>
                {
                    b.HasOne("HBStore.Model.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HBStore.Model.Address", b =>
                {
                    b.HasOne("HBStore.Model.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("HBStore.Model.Brand", b =>
                {
                    b.HasOne("HBStore.Model.Company", "Company")
                        .WithMany("Brands")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HBStore.Model.Category", b =>
                {
                    b.HasOne("HBStore.Model.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("HBStore.Model.Comment", b =>
                {
                    b.HasOne("HBStore.Model.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HBStore.Model.Company", b =>
                {
                    b.HasOne("HBStore.Model.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("HBStore.Model.Company", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HBStore.Model.Customer", b =>
                {
                    b.HasOne("HBStore.Model.Complaint", "Complaint")
                        .WithMany("Customers")
                        .HasForeignKey("ComplaintId");

                    b.HasOne("HBStore.Model.Order", "Order")
                        .WithMany("Customers")
                        .HasForeignKey("OrderId");

                    b.HasOne("HBStore.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HBStore.Model.District", b =>
                {
                    b.HasOne("HBStore.Model.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("HBStore.Model.Incidence", b =>
                {
                    b.HasOne("HBStore.Model.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HBStore.Model.Order", b =>
                {
                    b.HasOne("HBStore.Model.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("HBStore.Model.Payment", b =>
                {
                    b.HasOne("HBStore.Model.CreditCard", "CreditCard")
                        .WithMany("Payments")
                        .HasForeignKey("CardId");

                    b.HasOne("HBStore.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("CreditCard");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HBStore.Model.Product", b =>
                {
                    b.HasOne("HBStore.Model.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HBStore.Model.Supplier", b =>
                {
                    b.HasOne("HBStore.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("HBStore.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("HBStore.Model.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HBStore.Model.Product", "Product")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HBStore.Model.User", b =>
                {
                    b.HasOne("HBStore.Model.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId");

                    b.HasOne("HBStore.Model.Gender", "Gender")
                        .WithOne("User")
                        .HasForeignKey("HBStore.Model.User", "GenderId");

                    b.Navigation("Account");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("HBStore.Model.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HBStore.Model.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HBStore.Model.Account", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HBStore.Model.Address", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();
                });

            modelBuilder.Entity("HBStore.Model.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HBStore.Model.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("HBStore.Model.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("HBStore.Model.Company", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("HBStore.Model.Complaint", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("HBStore.Model.CreditCard", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HBStore.Model.Customer", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("HBStore.Model.District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("HBStore.Model.Gender", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HBStore.Model.Order", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("HBStore.Model.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HBStore.Model.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("HBStore.Model.User", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
